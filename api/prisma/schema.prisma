generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model album {
  albumid     Int      @unique @default(autoincrement())
  albumname   String   @db.VarChar(10)
  realesedate DateTime @db.Date
  release     release?
  song        song[]
}

model appartainance {
  genrename String @id @db.VarChar(16)
  songid    Int
  genre     genre  @relation(fields: [genrename], references: [genrename], onDelete: Cascade, onUpdate: NoAction)
  song      song   @relation(fields: [songid], references: [songid], onDelete: Cascade, onUpdate: NoAction)
}

model band {
  bandname       String    @id @db.VarChar(10)
  foundationdate DateTime  @db.Date
  release        release[]
  writing        writing[]
}

model chat {
  chatid        Int       @id @default(autoincrement())
  participantid Int
  chatname      String    @db.VarChar(10)
  message       message[]
}

model chat_participant {
  participantid Int       @id @default(autoincrement())
  entrydate     DateTime  @unique @db.Date
  exitdate      DateTime? @unique @db.Date
  nickname      String    @db.VarChar(16)
  musician      musician  @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  message       message[]
}

model comment {
  commentid        Int        @id @default(autoincrement())
  commenttext      String     @db.VarChar(32)
  timestampcomment DateTime   @db.Timestamp(6)
  nickname         String     @db.VarChar(16)
  discussionid     Int
  discussion       discussion @relation(fields: [discussionid], references: [discussionid], onDelete: Cascade, onUpdate: NoAction)
  musician         musician   @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
}

model discussion {
  discussionid        Int              @id @default(autoincrement())
  timestampdiscussion DateTime         @db.Timestamp(6)
  title               String           @db.VarChar(16)
  average             Int
  nickname            String           @db.VarChar(16)
  comment             comment[]
  musician            musician         @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  post_reference      post_reference[]
  reaction            reaction[]
}

model follow {
  genrename String   @db.VarChar(16)
  nickname  String   @db.VarChar(16)
  genre     genre    @relation(fields: [genrename], references: [genrename], onDelete: Cascade, onUpdate: NoAction)
  musician  musician @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)

  @@id([genrename, nickname])
}

model genre {
  genrename        String         @id @db.VarChar(16)
  genredescription String         @db.VarChar(128)
  origin           String         @db.VarChar(256)
  appartainance    appartainance?
  follow           follow[]
}

model hashtag {
  hashtagname    String           @id @db.VarChar(10)
  observation    observation[]
  post_reference post_reference[]
}

model influence {
  genrename String @db.VarChar(16)
  nickname  String @db.VarChar(16)

  @@id([genrename, nickname])
}

model message {
  messageid        Int              @id @default(autoincrement())
  chatid           Int
  participantid    Int
  messagetext      String           @db.VarChar(255)
  timestampmessage DateTime         @db.Date
  chat             chat             @relation(fields: [chatid], references: [chatid], onDelete: Cascade, onUpdate: NoAction)
  chat_participant chat_participant @relation(fields: [participantid], references: [participantid], onDelete: Cascade, onUpdate: NoAction)
}

model musician {
  nickname         String             @id @db.VarChar(16)
  firstname        String             @db.VarChar(20)
  lastname         String             @db.VarChar(20)
  e_mail           String?            @unique @db.VarChar(100)
  locality         String             @db.VarChar(16)
  bestinstrument   String             @db.VarChar(16)
  telephonenumber  String             @unique @db.VarChar(16)
  iscertified      Boolean
  ismaster         Boolean
  pass             String             @db.VarChar(128)
  chat_participant chat_participant[]
  comment          comment[]
  discussion       discussion[]
  follow           follow[]
  observation      observation[]
  reaction         reaction[]
  release          release[]
  writing          writing[]
}

model post_reference {
  discussionid Int
  hashtagname  String     @db.VarChar(10)
  discussion   discussion @relation(fields: [discussionid], references: [discussionid], onDelete: Cascade, onUpdate: NoAction)
  hashtag      hashtag    @relation(fields: [hashtagname], references: [hashtagname], onDelete: Cascade, onUpdate: NoAction)

  @@id([discussionid, hashtagname])
}

model reaction {
  nickname     String     @db.VarChar(16)
  discussionid Int
  vote         Boolean?
  dateandtime  DateTime   @db.Timestamp(6)
  discussion   discussion @relation(fields: [discussionid], references: [discussionid], onDelete: Cascade, onUpdate: NoAction)
  musician     musician   @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)

  @@id([nickname, discussionid])
}

model release {
  albumid  Int       @id
  nickname String?   @db.VarChar(16)
  bandname String?   @db.VarChar(10)
  album    album     @relation(fields: [albumid], references: [albumid], onDelete: Cascade, onUpdate: NoAction)
  band     band?     @relation(fields: [bandname], references: [bandname], onDelete: Cascade, onUpdate: NoAction)
  musician musician? @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
}

model song {
  songid        Int             @id @default(autoincrement())
  musictrack    Int
  songname      String          @db.VarChar(10)
  duration      Int
  albumid       Int
  appartainance appartainance[]
  album         album           @relation(fields: [albumid], references: [albumid], onDelete: Cascade, onUpdate: NoAction)
  writing       writing?
}

model writing {
  songid   Int       @id
  nickname String?   @db.VarChar(16)
  bandname String?   @db.VarChar(10)
  band     band?     @relation(fields: [bandname], references: [bandname], onDelete: Cascade, onUpdate: NoAction)
  musician musician? @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)
  song     song      @relation(fields: [songid], references: [songid], onDelete: Cascade, onUpdate: NoAction)
}

model observation {
  hashtagname String   @db.VarChar(10)
  nickname    String   @db.VarChar(16)
  hashtag     hashtag  @relation(fields: [hashtagname], references: [hashtagname], onDelete: Cascade, onUpdate: NoAction)
  musician    musician @relation(fields: [nickname], references: [nickname], onDelete: Cascade, onUpdate: NoAction)

  @@id([hashtagname, nickname])
}
